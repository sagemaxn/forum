query AllUsers {
  users {
    username
  }
}

query Posts($offset: Int!, $limit: Int!) {
  posts(offset: $offset, limit: $limit) {
    data {
      content
      username
      avatar
      createdAt
      _id
    }
    total
  }
}

query UserPosts($offset: Int!, $limit: Int!, $username: String!) {
  userPosts(offset: $offset, limit: $limit, username: $username) {
    data {
      content
      avatar
      username
      createdAt
      _id
    }
    total
  }
}

mutation Post($username: String!, $content: String!, $avatar: String!, $thread_id: ID!) {
  createPost(input: { username: $username, content: $content, thread_id: $thread_id }, avatar: $avatar) {
    username,
    avatar,
    content,
    thread_id,
    createdAt,
  }
}

mutation DeletePost($postID: String!) {
  deletePost(postID: $postID)
}

mutation Reg($username: String!, $password: String!) {
  createUser(input: { username: $username, password: $password }) {
    username
  }
}

mutation Login($username: String!, $password: String!) {
  login(input: { username: $username, password: $password }) {
    token
  }
}

mutation Logout {
  logout
}

mutation ChangeAvatar($username: String!, $avatar: String!) {
  changeAvatar(username: $username, avatar: $avatar) {
    username
    avatar
  }
}

query CurrentUserAvatar($username: String!) {
  currentUser(username: $username) {
    avatar
  }
}

mutation Auth($cookie: String!) {
  checkAuth(cookie: $cookie) {
    token
  }
}

mutation CreateThread($input: ThreadInput!) {
  createThread(input: $input) {
    title
    username
    createdAt
    _id
    avatar
    posts {
      _id
    }

  }
}

query Threads($offset: Int!, $limit: Int!) {
  threads(offset: $offset, limit: $limit) {
    data {
      _id
      createdAt
      title
      username
      avatar
    }
    total
  }
}

query ThreadWithPosts($threadWithPostsId: String!, $offset: Int!, $limit: Int!) {
  threadWithPosts(id: $threadWithPostsId, offset: $offset, limit: $limit) {
    thread {
      username
      posts {
        _id
      }
    }
    total
    posts {
      _id
      content
      avatar
      createdAt
      thread_id
      user {

      }
    }
  }
}